#include "CAuthListener.hpp"
#include "Application/CApplication.h"

#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QString>
#include <QtNetwork/QTcpSocket>


#include "qt-wrappers.hpp"

#define LOGO_URL "https://obsproject.com/assets/images/new_icon_small-r.png"

static const QString serverResponseHeader =
	QStringLiteral("HTTP/1.0 200 OK\n"
		       "Connection: close\n"
		       "Content-Type: text/html; charset=UTF-8\n"
		       "Server: SOOP Studio\n"
		       "\n"
		       "<html><head><title>SOOP Studio"
		       "</title></head>");

static const QString responseTemplate =
	"<center>"
	"<img src=\"" LOGO_URL
	"\" alt=\"OBS\" class=\"center\"  height=\"60\" width=\"60\">"
	"</center>"
	"<center><p style=\"font-family:verdana; font-size:13pt\">%1</p></center>";

//static const QString svgTemplate =
//    "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"421\" height=\"33\" fill=\"none\" viewBox=\"0 0 421 124\" class=\"sc-5e2f11cd-3 ddumwi\">"
//    "<g fill=\"currentColor\" clip-path=\"url(#clip0_15769_116657)\">"
//    "<path d=\"M222.796 12c-14.81 0-28.115 6.44-37.27 16.67a.972.972 0 0 1-1.46 0C174.911 18.44 161.606 12 146.796 12c-27.615 0-50 22.385-50 50s22.385 50 50 50c14.81 0 28.115-6.44 37.27-16.67a.972.972 0 0 1 1.46 0c9.155 10.23 22.46 16.67 37.27 16.67 27.615 0 50-22.385 50-50s-22.385-50-50-50Zm0 76c-8 0-14.685-3.855-18.785-8.21-1.305-1.39-2.925-3.295-4.705-4.91-.85-.77-1.695-1.46-2.505-2.08-3.345-2.385-7.495-3.8-12-3.8s-8.655 1.415-12 3.8c-.815.62-1.655 1.31-2.505 2.08-1.785 1.615-3.4 3.52-4.705 4.91-4.1 4.355-10.785 8.21-18.785 8.21-.205 0-.405-.01-.61-.015-.345-.01-.69-.02-1.03-.04-.235-.015-.47-.035-.7-.055-.14-.01-.28-.025-.415-.035C130.986 86.48 120.806 75.43 120.806 62v.11-.22.11c0-13.425 10.18-24.475 23.24-25.855.145-.015.295-.025.44-.04.225-.02.45-.035.675-.05.345-.02.69-.03 1.04-.04.2 0 .4-.015.6-.015 8 0 14.685 3.855 18.785 8.21 1.305 1.39 2.925 3.295 4.705 4.91.85.77 1.695 1.46 2.505 2.08 3.345 2.385 7.495 3.8 12 3.8s8.655-1.415 12-3.8c.815-.62 1.655-1.31 2.505-2.08 1.785-1.615 3.4-3.52 4.705-4.91 4.1-4.355 10.785-8.21 18.785-8.21.2 0 .395.01.595.015.35.01.7.02 1.045.04.22.015.44.03.66.05.155.01.31.025.465.04 12.56 1.33 22.45 11.6 23.185 24.33 0 .085.01.165.015.245.01.235.015.475.02.71.005.355.01.705 0 1.06-.005.265-.005.535-.02.8 0 .055-.01.11-.01.165-.705 12.755-10.61 23.06-23.19 24.39-.16.015-.315.03-.475.04-.215.02-.43.035-.645.05-.345.02-.7.03-1.05.04-.2 0-.395.015-.595.015l.005.01Z\" class=\"center-text\"></path>"
//    "<path d=\"m51.71 48.27 14.876 4.83c2.21.9 10.21 2.9 16.21 8.9 5.525 5.525 8 12.92 8 20.115 0 21.885-22.59 29.885-39 29.885-25 0-35.78-11.07-39-14l14.78-18.885C28.62 80.535 38.796 90 51.796 90c5 0 13-2 13-8 0-4-4.105-7.15-13-10l-14.87-4.835C26.696 63.11 18.796 56 18.796 42c0-7.665 2.945-13.5 4.29-15.59C31.4 13.465 48.036 12 53.796 12c10.13 0 17.615 1.87 23.045 4.165C83.736 19.08 87.32 22.68 88.796 24L76.47 39.75c-14.065-8.7-22.83-8.05-27.675-6.33-3.3 1.17-4.35 3.8-4.5 5.5-.185 2.095.15 6.635 7.415 9.345v.005ZM322.796 12.5h-40v99h24v-33h16c16.845 0 32-10 32-33s-15.155-33-32-33Zm8 33c0 7.18-5.82 13-13 13h-11v-26h11c7.18 0 13 5.82 13 13Z\" class=\"side-text\"></path>"
//    "</g>"
//<svg xmlns="http://www.w3.org/2000/svg" width="421" height="33" fill="none" viewBox="0 0 421 124" class="sc-5e2f11cd-3 ddumwi"><g fill="currentColor" clip-path="url(#clip0_15769_116657)"><path d="M222.796 12c-14.81 0-28.115 6.44-37.27 16.67a.972.972 0 0 1-1.46 0C174.911 18.44 161.606 12 146.796 12c-27.615 0-50 22.385-50 50s22.385 50 50 50c14.81 0 28.115-6.44 37.27-16.67a.972.972 0 0 1 1.46 0c9.155 10.23 22.46 16.67 37.27 16.67 27.615 0 50-22.385 50-50s-22.385-50-50-50Zm0 76c-8 0-14.685-3.855-18.785-8.21-1.305-1.39-2.925-3.295-4.705-4.91-.85-.77-1.695-1.46-2.505-2.08-3.345-2.385-7.495-3.8-12-3.8s-8.655 1.415-12 3.8c-.815.62-1.655 1.31-2.505 2.08-1.785 1.615-3.4 3.52-4.705 4.91-4.1 4.355-10.785 8.21-18.785 8.21-.205 0-.405-.01-.61-.015-.345-.01-.69-.02-1.03-.04-.235-.015-.47-.035-.7-.055-.14-.01-.28-.025-.415-.035C130.986 86.48 120.806 75.43 120.806 62v.11-.22.11c0-13.425 10.18-24.475 23.24-25.855.145-.015.295-.025.44-.04.225-.02.45-.035.675-.05.345-.02.69-.03 1.04-.04.2 0 .4-.015.6-.015 8 0 14.685 3.855 18.785 8.21 1.305 1.39 2.925 3.295 4.705 4.91.85.77 1.695 1.46 2.505 2.08 3.345 2.385 7.495 3.8 12 3.8s8.655-1.415 12-3.8c.815-.62 1.655-1.31 2.505-2.08 1.785-1.615 3.4-3.52 4.705-4.91 4.1-4.355 10.785-8.21 18.785-8.21.2 0 .395.01.595.015.35.01.7.02 1.045.04.22.015.44.03.66.05.155.01.31.025.465.04 12.56 1.33 22.45 11.6 23.185 24.33 0 .085.01.165.015.245.01.235.015.475.02.71.005.355.01.705 0 1.06-.005.265-.005.535-.02.8 0 .055-.01.11-.01.165-.705 12.755-10.61 23.06-23.19 24.39-.16.015-.315.03-.475.04-.215.02-.43.035-.645.05-.345.02-.7.03-1.05.04-.2 0-.395.015-.595.015l.005.01Z" class="center-text"></path><path d="m51.71 48.27 14.876 4.83c2.21.9 10.21 2.9 16.21 8.9 5.525 5.525 8 12.92 8 20.115 0 21.885-22.59 29.885-39 29.885-25 0-35.78-11.07-39-14l14.78-18.885C28.62 80.535 38.796 90 51.796 90c5 0 13-2 13-8 0-4-4.105-7.15-13-10l-14.87-4.835C26.696 63.11 18.796 56 18.796 42c0-7.665 2.945-13.5 4.29-15.59C31.4 13.465 48.036 12 53.796 12c10.13 0 17.615 1.87 23.045 4.165C83.736 19.08 87.32 22.68 88.796 24L76.47 39.75c-14.065-8.7-22.83-8.05-27.675-6.33-3.3 1.17-4.35 3.8-4.5 5.5-.185 2.095.15 6.635 7.415 9.345v.005ZM322.796 12.5h-40v99h24v-33h16c16.845 0 32-10 32-33s-15.155-33-32-33Zm8 33c0 7.18-5.82 13-13 13h-11v-26h11c7.18 0 13 5.82 13 13Z" class="side-text"></path></g><path fill="currentColor" d="M403.298 109.264a8.65 8.65 0 0 1-2.854 2.022 8.296 8.296 0 0 1-3.37.714c-1.401 0-2.551-.318-3.449-.952a5.185 5.185 0 0 1-1.824-2.498 5.967 5.967 0 0 1-.198-3.132c.37-1.797 1.374-3.185 3.013-4.163 1.665-1.004 3.832-1.506 6.502-1.506 1.427 0 2.762.119 4.004.357l.119-.555c.555-2.855-.766-4.282-3.965-4.282-1.11 0-2.167.158-3.171.475a8.771 8.771 0 0 0-2.617 1.349l-1.467-2.22c.978-.767 2.115-1.349 3.41-1.745a13.07 13.07 0 0 1 4.083-.635c2.591 0 4.494.648 5.709 1.943 1.243 1.269 1.639 3.013 1.19 5.233l-2.3 11.776h-3.092l.277-2.181Zm.952-4.639.396-2.101a15.522 15.522 0 0 0-1.704-.238 20.12 20.12 0 0 0-1.745-.079c-1.771 0-3.185.317-4.242.951-1.057.608-1.705 1.507-1.943 2.696-.211 1.058-.039 1.917.516 2.577.555.661 1.374.992 2.458.992.898 0 1.797-.225 2.696-.674a7.763 7.763 0 0 0 2.339-1.785c.661-.74 1.07-1.519 1.229-2.339ZM378.797 93.05h3.33l1.19-6.067h3.33l-1.189 6.066h5.352l-.515 2.696h-5.353l-1.903 9.595c-.264 1.268-.171 2.233.278 2.894.449.634 1.084.951 1.903.951.555 0 1.123-.119 1.705-.357.581-.264 1.044-.594 1.387-.991l1.348 2.22c-1.321 1.296-2.934 1.943-4.837 1.943-1.929 0-3.356-.595-4.281-1.784-.925-1.189-1.177-2.855-.754-4.995l1.824-9.476h-3.33l.515-2.696ZM361.276 103.198c-.079 1.137.106 2.154.556 3.053a5.24 5.24 0 0 0 1.942 2.141c.872.502 1.903.753 3.093.753 1.929 0 3.7-.819 5.312-2.458l1.903 2.062c-.898 1.03-2.008 1.837-3.33 2.418a10.744 10.744 0 0 1-4.203.833c-1.955 0-3.647-.463-5.074-1.388-1.401-.952-2.405-2.233-3.013-3.846-.608-1.612-.714-3.409-.318-5.392.344-1.744 1.005-3.277 1.983-4.599.978-1.348 2.167-2.392 3.568-3.132a9.347 9.347 0 0 1 4.559-1.15c1.745 0 3.212.423 4.401 1.27 1.216.845 2.088 1.995 2.617 3.448.528 1.454.608 3.106.238 4.956l-.199 1.031h-14.035Zm2.855-6.343c-1.163.978-1.956 2.273-2.379 3.885h10.665c.159-1.612-.145-2.907-.912-3.885-.766-1.005-1.89-1.507-3.37-1.507-1.48 0-2.815.502-4.004 1.507ZM355.214 92.136a6.544 6.544 0 0 1-1.824 3.45c-.925.925-2.114 1.599-3.568 2.022 1.691.475 2.973 1.387 3.846 2.735.872 1.322 1.136 2.855.793 4.599-.423 2.088-1.6 3.701-3.529 4.837-1.903 1.11-4.427 1.665-7.572 1.665h-8.564L339.95 85h7.81c1.718 0 3.172.317 4.361.951 1.216.608 2.102 1.454 2.657 2.538.555 1.057.7 2.273.436 3.647Zm-4.322 11.934c.291-1.533-.053-2.736-1.03-3.608-.952-.898-2.419-1.348-4.401-1.348h-4.797l-1.824 9.317h4.956c4.176 0 6.541-1.454 7.096-4.361Zm.833-11.854c.238-1.269-.04-2.287-.833-3.053-.793-.767-1.982-1.15-3.568-1.15h-4.48l-1.586 8.167h4.797c1.507 0 2.776-.357 3.807-1.07 1.03-.714 1.651-1.678 1.863-2.894Z" class="beta-text"></path><defs><linearGradient id="paint0_linear_15769_116657" x1="97.027" x2="273.048" y1="62.207" y2="62.207" gradientUnits="userSpaceOnUse"><stop stop-color="#D1FF00"></stop><stop offset="0.55" stop-color="#D1FF00"></stop><stop offset="0.97" stop-color="#FFF000"></stop><stop offset="1" stop-color="#FFF000"></stop></linearGradient><clipPath id="clip0_15769_116657"><path fill="#fff" d="M12.796 12h342v100h-342z"></path></clipPath></defs></svg>
//


AFAuthListener::AFAuthListener(QObject *parent) : QObject(parent)
{
	server = new QTcpServer(this);
	connect(server, &QTcpServer::newConnection, this,
		&AFAuthListener::NewConnection);
	if (!server->listen(QHostAddress::LocalHost, 0)) {
		blog(LOG_DEBUG, "Server could not start");
		emit fail();
	} else {
		blog(LOG_DEBUG, "Server started at port %d",
		     server->serverPort());
	}
}

quint16 AFAuthListener::GetPort()
{
	return server ? server->serverPort() : 0;
}

void AFAuthListener::SetState(QString state)
{
	this->state = state;
}

void AFAuthListener::SetGlobalSoop()
{
	m_globalSoop = true;
}

void AFAuthListener::NewConnection()
{
	QTcpSocket *socket = server->nextPendingConnection();
	if (socket) {
		connect(socket, &QTcpSocket::disconnected, socket,
			&QTcpSocket::deleteLater);
		connect(socket, &QTcpSocket::readyRead, socket, [&, socket]() {
			QByteArray buffer;
			while (socket->bytesAvailable() > 0) {
				buffer.append(socket->readAll());
			}
			socket->write(QT_TO_UTF8(serverResponseHeader));
			QString redirect = QString::fromLatin1(buffer);
			blog(LOG_DEBUG, "redirect: %s", QT_TO_UTF8(redirect));

			if (true == m_globalSoop) {
				QUrl urldata(redirect);
				emit ok(urldata.fromPercentEncoding(redirect.toUtf8()));
			}
			else {
				QRegularExpression re_state(
					"(&|\\?)state=(?<state>[^&]+)");
				QRegularExpression re_code(
					"(&|\\?)code=(?<code>[^&]+)");

				QRegularExpressionMatch match =
					re_state.match(redirect);

				QString code;

				if (match.hasMatch()) {
					if (state == match.captured("state")) {
						match = re_code.match(redirect);
						if (!match.hasMatch())
							blog(LOG_DEBUG, "no 'code' "
								"in server "
								"redirect");

						code = match.captured("code");
					}
					else {
						blog(LOG_WARNING, "state mismatch "
							"while handling "
							"redirect");
					}
				}
				else {
					blog(LOG_DEBUG, "no 'state' in "
						"server redirect");
				}

				if (code.isEmpty()) {
					//				auto data = responseTemplate.arg(
					//					QTStr("YouTube.Auth.NoCode"));
					//				socket->write(QT_TO_UTF8(data));
					emit fail();
				}
				else {
					//				auto data = responseTemplate.arg(
					//					QTStr("YouTube.Auth.Ok"));
					//				socket->write(QT_TO_UTF8(data));
					emit ok(code);
				}
			}			
			socket->flush();
			socket->close();
		});
	} else {
		emit fail();
	}
}
